{
  "openapi": "3.1.1",
  "info": {
    "title": "Coder API",
    "description": "Collection of Coder API routes for use in Postman.",
    "version": "1.1.0"
  },
  "servers": [
    {
      "url": "https://25a7d825a182.ngrok-free.app"
    }
  ],
  "paths": {
    "/projects": {
      "get": {
        "summary": "List Projects",
        "operationId": "listProjects",
        "responses": {
          "200": {
            "description": "Project list returned successfully."
          }
        }
      },
      "post": {
        "summary": "Create Project",
        "operationId": "createProject",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "source": {
                    "oneOf": [
                      {"type": "object", "properties": {"git": {"type": "object", "properties": {"url": {"type": "string"}, "branch": {"type": "string"}, "depth": {"type": "number"}, "token_env": {"type": "string"}}, "required": ["url"]}}},
                      {"type": "object", "properties": {"local": {"type": "object", "properties": {"mount": {"type": "string"}, "path": {"type": "string"}}}}},
                      {"type": "object", "properties": {"archiveUrl": {"type": "string", "format": "uri"}, "extract_to": {"type": "string"}}},
                      {"type": "object", "properties": {"adopt": {"type": "object", "properties": {"path": {"type": "string"}}}}}
                    ]
                  },
                  "name": {
                    "type": "string",
                    "description": "Project name. Used to generate a friendly project_id and folder name."
                  }
                },
                "required": ["source", "name"]
              },
              "examples": {
                "git": {
                  "summary": "Add project from a public Git repository",
                  "value": {
                    "source": {
                      "git": {
                        "url": "https://github.com/mauriciomilano/coder-api.git",
                        "branch": "main"
                      }
                    },
                    "name": "coder-api-git"
                  }
                },
                "git-private": {
                  "summary": "Add project from a private Git repository with token",
                  "value": {
                    "source": {
                      "git": {
                        "url": "https://github.com/username/private-repo.git",
                        "branch": "main",
                        "token_env": "GITHUB_TOKEN"
                      }
                    },
                    "name": "my-private-project"
                  }
                },
                "local": {
                  "summary": "Add project from a mounted local directory",
                  "value": {
                    "source": {
                      "local": {
                        "mount": "workbench",
                        "path": "/my-project"
                      }
                    },
                    "name": "my-local-project"
                  }
                },
                "archiveUrl": {
                  "summary": "Add project from an archive file (not implemented)",
                  "value": {
                    "source": {
                      "archiveUrl": "https://mysite.com/project.zip",
                      "extract_to": "/"
                    },
                    "name": "project-zip"
                  }
                },
                "adopt": {
                  "summary": "Adopt an existing directory from the filesystem",
                  "value": {
                    "source": {
                      "adopt": {
                        "path": "/srv/workspace/projects/already-existing"
                      }
                    },
                    "name": "existing-project"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Project created successfully."
          }
        }
      }
    },
    "/projects/{projectId}": {
      "patch": {
        "summary": "Edit Project Name",
        "operationId": "editProjectName",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Current project_id (slug)."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "New project name. Will update project_id and folder if changed."
                  }
                },
                "required": ["name"]
              },
              "example": {
                "name": "novo-nome-do-projeto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project name updated successfully. Returns new project_id, name, and root."
          },
          "400": {"description": "Invalid new name."},
          "404": {"description": "Project not found."},
          "500": {"description": "Failed to rename folder."}
        }
      }
    },
    "/projects/{projectId}/filetree": {
      "get": {
        "summary": "List Filetree",
        "operationId": "listFiletree",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "glob",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max_entries",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File tree listed successfully."
          }
        }
      }
    },
    "/projects/{projectId}/files": {
      "get": {
        "summary": "Read Project File",
        "operationId": "readProjectFile",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "encoding",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File content returned."
          }
        }
      },
      "post": {
        "summary": "Create Project File",
        "operationId": "createProjectFile",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "path": {
                    "type": "string"
                  },
                  "content": {
                    "type": "string"
                  },
                  "encoding": {
                    "type": "string"
                  },
                  "create_parents": {
                    "type": "boolean"
                  },
                  "overwrite": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "File created successfully."
          }
        }
      },
      "patch": {
        "summary": "Edit Project File",
        "description": "Edit a file within a project by searching for specific blocks of text and replacing them.",
        "operationId": "editProjectFile",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "path": {
                    "type": "string",
                    "description": "Relative path to the file to be edited within the project root."
                  },
                  "patches": {
                    "type": "array",
                    "description": "Array of patch objects, each with a 'search' string and a 'replace' string.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "search": { "type": "string", "description": "Text to search for in the file." },
                        "replace": { "type": "string", "description": "Text to replace the search string with." }
                      },
                      "required": ["search", "replace"]
                    }
                  }
                },
                "required": ["path", "patches"]
              },
              "example": {
                "path": "src/pages/Communication.tsx",
                "patches": [
                  {
                    "search": "import { Communication } from \"./pages/Communication\";",
                    "replace": "import CommunicationPage from \"./pages/Communication\";"
                  },
                  {
                    "search": "console.log('Old log');",
                    "replace": "console.log('New log message!');"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File edited successfully."
          }
        }
      },
      "delete": {
        "summary": "Delete Project File/Folder",
        "operationId": "deleteProjectPath",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "path": {
                    "type": "string"
                  },
                  "recursive": {
                    "type": "boolean"
                  },
                  "missing_ok": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File or folder deleted successfully."
          }
        }
      }
    },
    "/projects/{projectId}/bash": {
      "post": {
        "summary": "Run Bash in Project",
        "operationId": "runBashCommand",
        "parameters": [
          { "name": "projectId", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "command": { "type": "string" },
                  "workdir": { "type": "string" },
                  "timeout_sec": { "type": "integer" }
                }
              }
            }
          }
        },
        "responses": { "200": { "description": "Command executed successfully." } }
      }
    },
    "/projects/{projectId}/search": {
      "get": {
        "summary": "Search inside project files",
        "operationId": "searchProjectFiles",
        "parameters": [
          { "name": "projectId", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "path", "in": "query", "required": false, "schema": { "type": "string" }, "description": "Starting folder (default: /)" },
          { "name": "query", "in": "query", "required": true, "schema": { "type": "string" }, "description": "Search query (string or regex)" },
          { "name": "regex", "in": "query", "required": false, "schema": { "type": "boolean" }, "description": "Use regex instead of plain text" },
          { "name": "case_sensitive", "in": "query", "required": false, "schema": { "type": "boolean" }, "description": "Case sensitivity flag" },
          { "name": "max_results", "in": "query", "required": false, "schema": { "type": "integer" }, "description": "Maximum number of matches to return" }
        ],
        "responses": {
          "200": {
            "description": "Search results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "file": { "type": "string" },
                          "line": { "type": "string" },
                          "line_number": { "type": "integer" },
                          "match": { "type": "string" }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/docker/run": {
      "post": {
        "summary": "Build and Run Dockerfile in Project",
        "operationId": "runProjectDockerfile",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "dockerfilePath": {
                    "type": "string",
                    "description": "Path to the Dockerfile within the project.",
                    "default": "./Dockerfile"
                  },
                  "imageName": {
                    "type": "string",
                    "description": "Name for the Docker image. If not provided, a default name will be generated."
                  },
                  "containerName": {
                    "type": "string",
                    "description": "Name for the Docker container. If not provided, a default name will be generated."
                  },
                  "buildArgs": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Build arguments to pass to docker build."
                  },
                  "runArgs": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Runtime arguments to pass to docker run (e.g., ['-p', '8080:80'])."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Dockerfile built and container started successfully."
          },
          "400": {
            "description": "Invalid request or Docker command failed."
          },
          "404": {
            "description": "Project not found or Dockerfile not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/projects/{projectId}/docker/status": {
      "get": {
        "summary": "Get Docker Container Status",
        "operationId": "getProjectDockerStatus",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "containerName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Optional: Name of the container to get status for. If not provided, lists all containers for the project."
          }
        ],
        "responses": {
          "200": {
            "description": "Docker container status returned successfully."
          },
          "404": {
            "description": "Project not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/projects/": {
      "get": {
        "summary": "Get Project",
        "operationId": "getProject",
        "responses": {
          "200": {
            "description": "Project information obtained successfully."
          }
        }
      }
    }
  }
}
